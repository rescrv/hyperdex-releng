#!/usr/bin/env python3

# Copyright (c) 2015, Robert Escriva
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of this project nor the names of its contributors may
#       be used to endorse or promote products derived from this software
#       without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import argparse
import errno
import os
import os.path
import pipes
import re
import shlex
import shutil
import signal
import subprocess
import sys
import tempfile
import time

######################### Copied from Python 3.5 shlex #########################

# I had to modify this because line numbers are horribly broken in the shlex
# module.  My patch is not universal, otherwise I'd upstream it.

"""A lexical analyzer class for simple shell-like syntaxes."""

# Module and documentation by Eric S. Raymond, 21 Dec 1998
# Input stacking and error message cleanup added by ESR, March 2000
# push_source() and pop_source() made explicit by ESR, January 2001.
# Posix compliance, split(), string arguments, and
# iterator interface by Gustavo Niemeyer, April 2003.

import os
import re
import sys
from collections import deque

from io import StringIO

class shlex_fixed:
    "A lexical analyzer class for simple shell-like syntaxes."
    def __init__(self, instream=None, infile=None, posix=False):
        if isinstance(instream, str):
            instream = StringIO(instream)
        if instream is not None:
            self.instream = instream
            self.infile = infile
        else:
            self.instream = sys.stdin
            self.infile = None
        self.posix = posix
        if posix:
            self.eof = None
        else:
            self.eof = ''
        self.commenters = '#'
        self.wordchars = ('abcdfeghijklmnopqrstuvwxyz'
                          'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_')
        if self.posix:
            self.wordchars += ('ßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ'
                               'ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞ')
        self.whitespace = ' \t\r\n'
        self.whitespace_split = False
        self.quotes = '\'"'
        self.escape = '\\'
        self.escapedquotes = '"'
        self.state = ' '
        self.pushback = deque()
        self.lineno = 1
        self.newlines = 1
        self.debug = 0
        self.token = ''
        self.filestack = deque()
        self.source = None

    def push_token(self, tok):
        "Push a token onto the stack popped by the get_token method"
        if self.debug >= 1:
            print("shlex: pushing token " + repr(tok))
        self.pushback.appendleft(tok)

    def push_source(self, newstream, newfile=None):
        "Push an input source onto the lexer's input source stack."
        if isinstance(newstream, str):
            newstream = StringIO(newstream)
        self.filestack.appendleft((self.infile, self.instream, self.newlines))
        self.infile = newfile
        self.instream = newstream
        self.newlines = 1
        if self.debug:
            if newfile is not None:
                print('shlex: pushing to file %s' % (self.infile,))
            else:
                print('shlex: pushing to stream %s' % (self.instream,))

    def pop_source(self):
        "Pop the input source stack."
        self.instream.close()
        (self.infile, self.instream, self.newlines) = self.filestack.popleft()
        if self.debug:
            print('shlex: popping to %s, line %d' \
                  % (self.instream, self.newlines))
        self.state = ' '

    def get_token(self):
        "Get a token from the input stream (or from stack if it's nonempty)"
        if self.pushback:
            tok = self.pushback.popleft()
            if self.debug >= 1:
                print("shlex: popping token " + repr(tok))
            return tok
        # No pushback.  Get a token.
        raw = self.read_token()
        # Handle inclusions
        if self.source is not None:
            while raw == self.source:
                spec = self.sourcehook(self.read_token())
                if spec:
                    (newfile, newstream) = spec
                    self.push_source(newstream, newfile)
                raw = self.get_token()
        # Maybe we got EOF instead?
        while raw == self.eof:
            if not self.filestack:
                return self.eof
            else:
                self.pop_source()
                raw = self.get_token()
        # Neither inclusion nor EOF
        if self.debug >= 1:
            if raw != self.eof:
                print("shlex: token=" + repr(raw))
            else:
                print("shlex: token=EOF")
        return raw

    def read_token(self):
        quoted = False
        escapedstate = ' '
        while True:
            nextchar = self.instream.read(1)
            self.lineno = self.newlines
            if nextchar == '\n':
                self.newlines = self.newlines + 1
            if self.debug >= 3:
                print("shlex: in state", repr(self.state), \
                      "I see character:", repr(nextchar))
            if self.state is None:
                self.token = ''        # past end of file
                break
            elif self.state == ' ':
                if not nextchar:
                    self.state = None  # end of file
                    break
                elif nextchar in self.whitespace:
                    if self.debug >= 2:
                        print("shlex: I see whitespace in whitespace state")
                    if self.token or (self.posix and quoted):
                        break   # emit current token
                    else:
                        continue
                elif nextchar in self.commenters:
                    self.instream.readline()
                    self.newlines = self.newlines + 1
                elif self.posix and nextchar in self.escape:
                    escapedstate = 'a'
                    self.state = nextchar
                elif nextchar in self.wordchars:
                    self.token = nextchar
                    self.state = 'a'
                elif nextchar in self.quotes:
                    if not self.posix:
                        self.token = nextchar
                    self.state = nextchar
                elif self.whitespace_split:
                    self.token = nextchar
                    self.state = 'a'
                else:
                    self.token = nextchar
                    if self.token or (self.posix and quoted):
                        break   # emit current token
                    else:
                        continue
            elif self.state in self.quotes:
                quoted = True
                if not nextchar:      # end of file
                    if self.debug >= 2:
                        print("shlex: I see EOF in quotes state")
                    # XXX what error should be raised here?
                    raise ValueError("No closing quotation")
                if nextchar == self.state:
                    if not self.posix:
                        self.token = self.token + nextchar
                        self.state = ' '
                        break
                    else:
                        self.state = 'a'
                elif self.posix and nextchar in self.escape and \
                     self.state in self.escapedquotes:
                    escapedstate = self.state
                    self.state = nextchar
                else:
                    self.token = self.token + nextchar
            elif self.state in self.escape:
                if not nextchar:      # end of file
                    if self.debug >= 2:
                        print("shlex: I see EOF in escape state")
                    # XXX what error should be raised here?
                    raise ValueError("No escaped character")
                # In posix shells, only the quote itself or the escape
                # character may be escaped within quotes.
                if escapedstate in self.quotes and \
                   nextchar != self.state and nextchar != escapedstate:
                    self.token = self.token + self.state
                self.token = self.token + nextchar
                self.state = escapedstate
            elif self.state == 'a':
                if not nextchar:
                    self.state = None   # end of file
                    break
                elif nextchar in self.whitespace:
                    if self.debug >= 2:
                        print("shlex: I see whitespace in word state")
                    self.state = ' '
                    if self.token or (self.posix and quoted):
                        break   # emit current token
                    else:
                        continue
                elif nextchar in self.commenters:
                    self.instream.readline()
                    self.newlines = self.newlines + 1
                    if self.posix:
                        self.state = ' '
                        if self.token or (self.posix and quoted):
                            break   # emit current token
                        else:
                            continue
                elif self.posix and nextchar in self.quotes:
                    self.state = nextchar
                elif self.posix and nextchar in self.escape:
                    escapedstate = 'a'
                    self.state = nextchar
                elif nextchar in self.wordchars or nextchar in self.quotes \
                    or self.whitespace_split:
                    self.token = self.token + nextchar
                else:
                    self.pushback.appendleft(nextchar)
                    if self.debug >= 2:
                        print("shlex: I see punctuation in word state")
                    self.state = ' '
                    if self.token:
                        break   # emit current token
                    else:
                        continue
        result = self.token
        self.token = ''
        if self.posix and not quoted and result == '':
            result = None
        if self.debug > 1:
            if result:
                print("shlex: raw token=" + repr(result))
            else:
                print("shlex: raw token=EOF")
        return result

    def sourcehook(self, newfile):
        "Hook called on a filename to be sourced."
        if newfile[0] == '"':
            newfile = newfile[1:-1]
        # This implements cpp-like semantics for relative-path inclusion.
        if isinstance(self.infile, str) and not os.path.isabs(newfile):
            newfile = os.path.join(os.path.dirname(self.infile), newfile)
        return (newfile, open(newfile, "r"))

    def error_leader(self, infile=None, lineno=None):
        "Emit a C-compiler-like, Emacs-friendly error-message leader."
        if infile is None:
            infile = self.infile
        if lineno is None:
            lineno = self.newlines
        return "\"%s\", line %d: " % (infile, lineno)

    def __iter__(self):
        return self

    def __next__(self):
        token = self.get_token()
        if token == self.eof:
            raise StopIteration
        return token

################################# Gremlin Code #################################

class GremlinError(Exception): pass

def sanitized_shell(cmd):
    return ' '.join([pipes.quote(c) for c in cmd])

class Parser(object):

    def __init__(self, path):
        self.path = path

    def parse(self):
        if not os.path.exists(self.path):
            raise GremlinError('no such file %r' % self.path)
        s = shlex_fixed(open(self.path, 'r'), self.path, posix=True)
        s.whitespace = ' \t\r\n'
        s.wordchars += '!#$%&()*+,-./:<=>?@[\\]^_`{|}~'
        s.source = 'include'
        cmds = []
        cmd = []
        prev_lineno = 1
        while True:
            x = s.get_token()
            if x is s.eof:
                cmds.append(cmd)
                break
            if x == ';':
                cmds.append(cmd)
                cmd = []
            elif prev_lineno != s.lineno and x != '\n':
                cmds.append(cmd)
                cmd = [x]
            elif x != '\n':
                cmd.append(x)
            prev_lineno = s.lineno
        cmds = [tuple(cmd) for cmd in cmds if cmd]
        return cmds

class Playground(object):

    def __init__(self, path):
        self.parser = Parser(path)
        self.environment = {}
        self.base = tempfile.mkdtemp(prefix='gremlin-')
        self.crash_is_nop = False
        self.daemons = []
        self.timeout = None
        self.failed = False
        self.execed = 0
        self.exit = 0
        os.mkdir(os.path.join(self.base, '.gremlin'))

    def run(self):
        for cmd in self.parser.parse():
            assert cmd
            self.get_cmd(cmd[0])
        try:
            for cmd in self.parser.parse():
                f = self.get_cmd(cmd[0])
                f(cmd[1:])
                if self.failed:
                    break
            self.clean()
        finally:
            self.crash()

    def daemons_all_dead(self):
        return not any([d.returncode is None for d in self.daemons])

    def clean(self):
        count = 0
        dump_logs = self.failed
        for proc in self.daemons:
            if proc.poll() is not None and proc.returncode != 0:
                dump_logs = True
        start = time.time()
        timeout = self.timeout if self.timeout else 10
        while not self.daemons_all_dead():
            for proc in reversed(self.daemons):
                if proc.returncode is None and proc.poll() is None:
                    pid = proc.pid
                    assert pid > 0
                    if time.time() - start > timeout:
                        os.kill(pid, signal.SIGKILL)
                    else:
                        os.kill(pid, signal.SIGTERM)
            count += 1
            time.sleep(0.1 * count)
        for proc in self.daemons:
            if proc.returncode is None:
                proc.poll()
        if not self.daemons_all_dead():
            raise GremlinError("could not clean up all daemons")
        self.crash_is_nop = True
        for proc in self.daemons:
            proc.wait()
        if dump_logs:
            print('the gremlins were kind enough to provide log files')
            print('playground: %s' % self.base)
            if self.daemons:
                print()
            for idx, proc in enumerate(self.daemons):
                print('daemon[%d]: %s' % (idx, sanitized_shell(proc.cmd)))
                print('exited %d' % proc.returncode)
                output = open(self.daemon_logfile(idx), 'r').read()
                output = output.strip()
                if output:
                    print('stdout/stderr (merged):')
                    print(output)
                if idx + 1 < len(self.daemons):
                    print()
            self.exit = 1
        else:
            shutil.rmtree(self.base)
            self.exit = 0

    def crash(self):
        if self.crash_is_nop:
            return
        for proc in reversed(self.daemons):
            if proc.poll() is None:
                proc.kill()
            proc.wait()

    def get_cmd(self, cmd):
        orig = cmd
        cmd = 'cmd_' + cmd.replace('-', '_')
        if not hasattr(self, cmd):
            raise GremlinError('unknown command: %r' % orig)
        return getattr(self, cmd)

    def cmd_env(self, cmd):
        if len(cmd) == 1:
            self.environment[cmd[0]] = ''
        elif len(cmd) == 2:
            self.environment[cmd[0]] = os.path.expandvars(cmd[1])
        else:
            raise GremlinError('invalid environment: %s' % sanitized_shell(cmd))

    def cmd_timeout(self, cmd):
        if len(cmd) == 0:
            self.timeout = None
        elif len(cmd) == 1:
            try:
                self.timeout = int(cmd[0])
            except ValueError:
                raise GremlinError('invalid timeout: %s' % sanitized_shell(cmd))
        else:
            raise GremlinError('invalid timeout: %s' % sanitized_shell(cmd))

    def cmd_run(self, cmd):
        try:
            env = dict(os.environ)
            env.update(self.environment)
            cmd = tuple(map(os.path.expandvars, cmd))
            p = subprocess.Popen(self.prefix_args() + cmd,
                                 cwd=self.base, env=env,
                                 stdout=subprocess.PIPE,
                                 stderr=subprocess.STDOUT)
            try:
                stdout, stderr = p.communicate(timeout=self.timeout)
            except subprocess.TimeoutExpired:
                print('timeout %ds exceeded: %s' % (self.timeout, sanitized_shell(cmd)))
                p.kill()
                stdout, stderr = p.communicate()
            if p.returncode != 0:
                self.failed = True
                print('exited %d: %s' % (p.returncode, sanitized_shell(cmd)))
                stdout = stdout.decode('utf8', 'ignore').strip()
                if stdout:
                    print('stdout/stderr (merged):')
                    print(stdout)
        except OSError as e:
            if e.errno == errno.ENOENT:
                raise GremlinError('ENOENT: %s' % sanitized_shell(cmd))
            raise e

    def cmd_tcp_port(self, cmd):
        ports = set()
        for p in cmd:
            try:
                p = int(p, 10)
                ports.add(p)
            except ValueError:
                raise GremlinError('invalid port: %s' % p)
        states = {}
        wait = True
        iteration = 0
        while wait:
            wait = False
            stdout = subprocess.check_output(('netstat', '-an'))
            stdout = stdout.decode('utf8', 'ignore')
            for x in re.findall('^tcp.*$', stdout, flags=re.MULTILINE):
                x = re.sub('\s+', ' ', x).split(' ')
                port = x[3].rsplit(':', 1)[-1]
                try:
                    port = int(port, 10)
                except ValueError:
                    raise GremlinError('error parsing netstat output')
                state = x[5]
                states[port] = state
                if port in ports and state != 'TIME_WAIT':
                    wait = True
            if wait and all([x in ('LISTEN', 'ESTABLISHED') for x in list(states.values())]):
                raise GremlinError('ports in use by other processes')
            if wait:
                time.sleep(0.1)
            iteration += 1
            if iteration >= 100:
                raise GremlinError('ports in use by other processes')

    def daemon_logfile(self, idx):
        return os.path.join(self.base, '.gremlin', 'daemon %d.log' % idx)

    def cmd_daemon(self, cmd):
        env = dict(os.environ)
        env.update(self.environment)
        stdout = open(self.daemon_logfile(len(self.daemons)), 'w')
        try:
            proc = subprocess.Popen(self.prefix_args() + cmd,
                                    stdout=stdout, stderr=subprocess.STDOUT,
                                    env=env, cwd=self.base)
        except OSError as e:
            if e.errno == errno.ENOENT:
                raise GremlinError('ENOENT: %s' % sanitized_shell(cmd))
            raise e
        proc.cmd = cmd
        self.daemons.append(proc)

    def cmd_kill(self, cmd):
        if len(cmd) != 2:
            raise GremlinError('invalid kill command: must be <signal> <daemon>')
        try:
            daemon = int(cmd[1], 10)
        except ValueError:
            raise GremlinError('daemon to kill must be a non-zero number')
        if daemon < 0:
            raise GremlinError('daemon to kill must be a non-zero number')
        if daemon >= len(self.daemons):
            raise GremlinError('daemon to kill must have been spawned first')
        sig = getattr(signal, 'SIG' + cmd[0], getattr(signal, cmd[0], None))
        if sig is None:
            raise GremlinError('unknown signal: %r' % cmd[0])
        daemon = self.daemons[daemon]
        daemon.send_signal(sig)

    def prefix_args(self):
        env = dict(os.environ)
        env.update(self.environment)
        if 'GREMLIN_PREFIX' not in env:
            return ()
        return tuple(shlex.split(env['GREMLIN_PREFIX'], posix=True))

def main(todo):
    try:
        p = Playground(todo)
        p.run()
        sys.exit(p.exit)
    except GremlinError as e:
        print(str(e), file=sys.stderr)
        sys.exit(1)

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('file', help='instructions for the gremlin')
    args = parser.parse_args()
    main(args.file)
